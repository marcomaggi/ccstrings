\input texinfo.tex
@c %**start of header
@setfilename ccstrings.info
@settitle CCStrings
@c %**end of header

@include version.texi
@include macros.texi

@c page
@c ------------------------------------------------------------
@c Values.
@c ------------------------------------------------------------

@set TITLE                      CCStrings

@c To be used as @value{PACKAGE} whenever we need to include the full
@c name of this package.
@set PACKAGE                    CCStrings

@c To be used as @value{PACKAGE} whenever we need to include the
@c nickname of the project: the name that is used to compose the
@c distribution tarball or the web address.
@set PACKAGE_NICKNAME           ccstrings

@c To be used as @value{AUTHOR} whenever we need to include the list of
@c authors of this document.
@set AUTHOR                     Marco Maggi

@c To be used as @value{AUTHOR_EMAIL} whenever we need to include the
@c email of the *single* author of this document.
@set AUTHOR_EMAIL               @email{marco.maggi-ipsu@@poste.it}

@c To be used as @value{COPYRIGHT_YEARS} whenever we need to include the
@c list of copyright years.
@set COPYRIGHT_YEARS            2017, 2018, 2019

@c ------------------------------------------------------------

@set CCExceptionsVersion       0.8.0
@set CCMemoryVersion           0.2.1
@set CCStructsVersion          0.2.0
@set CCTestsVersion            0.3.0

@c ------------------------------------------------------------

@set PackageAutoconfPrefix              CCSTRINGS
@set PackagePkgconfigModule             ccstrings
@set PackageLibsVar                     @env{CCSTRINGS_LIBS}
@set PackageCflagsVar                   @env{CCSTRINGS_CFLAGS}
@c This is the stem of the library in "libccstrings.so".
@set PackageLibstem                     ccstrings
@set PackageApiPrefixLower              ccstr_
@set PackageApiPrefixUpper              CCSTR_

@set PackageHeader                      ccstrings.h
@set PackageHeaderFile                  @file{@value{PackageHeader}}

@c ------------------------------------------------------------

@set GithubUrl                 @url{https://github.com/marcomaggi/@value{PACKAGE_NICKNAME}}
@set BitbucketUrl              @url{https://bitbucket.org/marcomaggi/@value{PACKAGE_NICKNAME}}
@set DownloadUrl               @url{https://bitbucket.org/marcomaggi/@value{PACKAGE_NICKNAME}/downloads}
@set DocumentationUrl          @url{https://marcomaggi.github.io/docs/@value{PACKAGE_NICKNAME}.html}

@c page
@c ------------------------------------------------------------
@c Copyright notice.
@c ------------------------------------------------------------

@copying
This document describes version @value{VERSION} of @value{PACKAGE}, a C11 language library
implementing custom strings.

The library supports @posix{} platforms.  The library depends on the packages: CCExceptions, at
least version @value{CCExceptionsVersion}; CCMemory, at least version @value{CCMemoryVersion};
CCStructs, at least version @value{CCStructsVersion}.  To run the test suite: the package depends
upon the package CCTests, at least version @value{CCTestsVersion}.

The package is distributed under the terms of the @gnu{} Lesser General Public License (@lgpl{}).

The latest release can be downloaded from:

@center @value{DownloadUrl}

@noindent
development takes place at:

@center @value{GithubUrl}

@noindent
and as backup at:

@center @value{BitbucketUrl}

@noindent
Copyright @copyright{} @value{COPYRIGHT_YEARS} by @value{AUTHOR} @value{AUTHOR_EMAIL}

@quotation
Permission is granted to copy, distribute and/or modify this document under the terms of the @gnu{}
Free Documentation License, Version 1.3 or any later version published by the Free Software
Foundation; with Invariant Sections being ``@gnu{} Free Documentation License'' and ``@gnu{} General
Public License'', no Front--Cover Texts, and no Back--Cover Texts.  A copy of the license is
included in the section entitled ``@gnu{} Free Documentation License''.
@end quotation
@end copying

@c page
@c ------------------------------------------------------------
@c Headers.
@c ------------------------------------------------------------

@titlepage
@title @value{TITLE}
@subtitle Revision @value{VERSION}
@author @value{AUTHOR} @value{AUTHOR_EMAIL}
@page
@vskip 0pt plus 1filll
@insertcopying
@end titlepage

@c ------------------------------------------------------------

@ifinfo
@dircategory Development
@direntry
* ccstrings: (ccstrings).       CCStrings a template library.
@end direntry
@end ifinfo

@c ------------------------------------------------------------

@ignore
@syncodeindex tp cp
@syncodeindex vr cp
@syncodeindex fn cp
@end ignore

@c page
@ifnottex
@node Top
@top @value{TITLE}

@insertcopying

@menu
* overview::                    Overview of the package.
* version::                     Version functions.
* init::                        Library initialisation.
* typedefs::                    Some type definitions.
* conditions::                  Condition objects.
* buffers::                     Collecting output in buffers.

Appendices

* Package License::             GNU Lesser General Public License.
* Documentation License::       GNU Free Documentation License.
* references::                  Bibliography and references.

Indexes

* concept index::               An entry for each concept.
* function index::              An entry for each function.
* variable index::              An entry for each variable.
* type index::                  An entry for each type.
@end menu
@end ifnottex

@c page
@node overview
@chapter Overview of the package


This document describes version @value{VERSION} of @value{PACKAGE}, a C11 language library
implementing custom strings.

This package supports @posix{} platforms.  This package depends on the packages: CCExceptions, at
least version @value{CCExceptionsVersion}; CCMemory, at least version @value{CCMemoryVersion};
CCStructs, at least version @value{CCStructsVersion}.  To run the test suite: this package depends
upon the package CCTests, at least version @value{CCTestsVersion}.

@cindex @value{PackageHeaderFile}, header file
@cindex Header file @value{PackageHeaderFile}
@value{PACKAGE} installs the single header file @value{PackageHeaderFile}.  All the function names
in the @api{} are prefixed with @code{@value{PackageApiPrefixLower}}; all the preprocessor symbol
names are prefixed with @code{@value{PackageApiPrefixUpper}}; all the type names are prefixed with
@code{@value{PackageApiPrefixLower}} and suffixed with @code{_t}.

We need to remember that, before using the library, we must call:

@example
ccstr_library_init();
@end example

@noindent
to initialise some internal data structures.

@menu
* overview linking::            Linking code with the library.
* overview ccnames::            Generated function names.
* overview exceptions::         Handling exceptional conditions.
* overview allocation::         Memory allocation for pathname instances.
@end menu

@include overview-linking.texi
@include overview-ccnames.texi
@include overview-ccexceptions.texi
@include overview-ccmemory.texi

@c page
@node version
@chapter Version functions


The installed libraries follow version numbering as established by the @gnu{} Autotools.  For an
explanation of interface numbers as managed by @gnu{} Libtool @xref{Libtool versioning, interface,
Libtool's versioning system, libtool, Shared library support for @gnu{}}.


@deftypefun {const char *} ccstr_version_string (void)
Return a pointer to a statically allocated @asciiz{} string representing
the interface version number.
@end deftypefun


@deftypefun int ccstr_version_interface_current (void)
Return an integer representing the library interface current number.
@end deftypefun


@deftypefun int ccstr_version_interface_revision (void)
Return an integer representing the library interface current revision
number.
@end deftypefun


@deftypefun int ccstr_version_interface_age (void)
Return an integer representing the library interface current age.
@end deftypefun

@c page
@node init
@chapter Library initialisation


@deftypefun void ccstr_library_init (void)
Initialise the internal structures of the library.  It is fine to call this function multiple times.

@quotation
@strong{NOTE} This function is defined with the @gcc{} attribute @code{constructor}, so, when the
library is built with @gcc{}: it will be called automatically by the library initialisation code.
@end quotation
@end deftypefun

@c page
@node typedefs
@chapter Some type definitions


@deftp {Struct Typedef} ccstr_block_t
Type of data structures representing memory blocks.  It has the following fields:

@table @code
@item int8_t * ptr
Pointer to the memory block.

@item size_t len
Number of bytes in the memory block.
@end table
@end deftp


@deftp {Struct Typedef} ccstr_ascii_t
Type of data structures representing an @ascii{} string, @strong{not} necessarily zero--terminated.
It has the following fields:

@table @code
@item char * ptr
Pointer to the memory block.

@item size_t len
Number of characters in the memory block.
@end table
@end deftp

@c page
@node conditions
@chapter Condition objects


@value{PACKAGE} uses the external library CCExceptions to signal exceptional conditions and errors
through non--local exits; @xref{Top, CCExceptions, CCExceptions, ccexceptions, CCExceptions}.

The functions will raise exceptional conditions with @cfunc{cce_raise} and expect the caller to
intercept them using the @code{cce_location_t} mechanics.  The basic code template is:

@example
cce_location_t  L[1];

if (cce_location(L)) @{
  /* Handle errors here. */
  cce_run_catch_handlers_final(L);
@} else @{
  /* Do something useful here. */
  cce_run_body_handlers(L);
@}
@end example

@menu
* conditions base::             Base exceptional conditions.
* conditions size overflow::    Size overflow exceptional conditions.
* conditions incomplete output:: Incomplete output exceptional conditions.
@end menu

@c page
@node conditions base
@section Base exceptional conditions


@cindex Base exceptional condition
@cindex Exceptional conditions, base


@deftp {Struct Typedef} ccstr_descriptor_base_t
Type of data structure representing the base exceptional--condition descriptor for all the
conditions defined by @value{PACKAGE}.  It has the following public fields:

@table @code
@item cce_descriptor_t descriptor
The condition descriptor's base values.
@end table

The parent of this type descriptor is the root type descriptor defined by the CCExceptions library;
@xref{conditions root, CCExceptions, CCExceptions, ccexceptions, CCExceptions}.
@end deftp


@deftypevr {Dynamic Constant} {ccstr_descriptor_base_t const * const} ccstr_descriptor_base
Pointer to the statically allocated exceptional--condition descriptor representing the base
descriptor for all the conditions defined by @value{PACKAGE}.
@end deftypevr


@deftypefun bool ccstr_condition_is_base (cce_condition_t const * @var{C})
Return @ctrue{} if @var{C} is of type @objtype{ccstr_descriptor_base_t}; otherwise return @cfalse{}.
@end deftypefun

@c page
@node conditions size overflow
@section Size overflow exceptional conditions


@cindex Size overflow, exceptional condition
@cindex Exceptional conditions, size overflow


@deftp {Struct Typedef} ccstr_descriptor_buffer_size_overflow_t
Type of data structure representing the exceptional--condition descriptor for the ``buffer size
overflow'' errors; this exception type is used whenever we attempt to allocate too much memory for a
buffer @objtype{ccstr_buffer_t}.  It has the following public fields:

@table @code
@item cce_descriptor_t descriptor
The condition descriptor's base values.
@end table

The parent of this type descriptor is the one referenced by @code{ccstr_descriptor_base}.
@end deftp


@deftp {Struct Typedef} ccstr_condition_buffer_size_overflow_t
Type of data structure representing an exceptional--condition object for a ``buffer size overflow''
error.  It has the following public fields:

@table @code
@item ccstr_buffer_t * buffer
Pointer to the buffer.

@item size_t required_len
The number of free bytes that were requested in the buffer.
@end table
@end deftp


@deftypevr {Dynamic Constant} {ccstr_descriptor_buffer_size_overflow_t const * const} ccstr_descriptor_buffer_size_overflow
Pointer to the statically allocated exceptional--condition descriptor.
@end deftypevr


@deftypefun {cce_condition_t const *} ccstr_condition_new_buffer_size_overflow (cce_location_t * @var{L}, ccstr_buffer_t * @var{B}, size_t @var{required_len})
Allocate and initialise a new condition object.  If an error occurs allocating the structure: an
exception is raised by performing a non--local exit to @var{L}.
@end deftypefun


@deftypefun void ccstr_condition_init_buffer_size_overflow (ccstr_condition_buffer_size_overflow_t * @var{C}, ccstr_buffer_t * @var{B}, size_t @var{required_len})
Initialise an already allocated condition object.
@end deftypefun


@deftypefun bool ccstr_condition_is_buffer_size_overflow (cce_condition_t const * @var{C})
Return @ctrue{} if @var{C} if of type @code{ccstr_descriptor_buffer_size_overflow}; otherwise return
@cfalse{}.
@end deftypefun


To catch this exceptional condition we can do:

@smallexample
cce_location_t        L[1];

if (cce_location(L)) @{
  if (ccstr_condition_is_buffer_size_overflow(cce_condition(L))) @{
    CCE_PC(ccstr_condition_buffer_size_overflow_t, C, cce_condition(L));
    do_something_with(C);
  @}
  cce_run_catch_handlers_final(L);
@} else @{
  do_something(L);
  cce_run_body_handlers(L);
@}
@end smallexample

@c page
@node conditions incomplete output
@section Incomplete output exceptional conditions


@cindex Incomplete output, exceptional condition
@cindex Exceptional conditions, incomplete output


@deftp {Struct Typedef} ccstr_descriptor_buffer_output_incomplete_t
Type of data structure representing the exceptional--condition descriptor for the ``buffer
incomplete output'' errors; this exception type is used whenever we attempt to write a buffer to an
output device and only some data is written.  It has the following public fields:

@table @code
@item cce_descriptor_t descriptor
The condition descriptor's base values.
@end table

The parent of this type descriptor is the one referenced by @code{ccstr_descriptor_base}.
@end deftp


@deftp {Struct Typedef} ccstr_condition_buffer_output_incomplete_t
Type of data structure representing an exceptional--condition object for a ``buffer incomplete
output error.  It has the following public fields:

@table @code
@item ccstr_buffer_t * buffer
Pointer to the buffer.

@item size_t written_len
The number of bytes that were written to the device.
@end table
@end deftp


@deftypevr {Dynamic Constant} {ccstr_descriptor_buffer_output_incomplete_t const * const} ccstr_descriptor_buffer_output_incomplete
Pointer to the statically allocated exceptional--condition descriptor.
@end deftypevr


@deftypefun {cce_condition_t const *} ccstr_condition_new_buffer_output_incomplete (cce_location_t * @var{L}, ccstr_buffer_t * @var{B}, size_t @var{written_len})
Allocate and initialise a new condition object.  If an error occurs allocating the structure: an
exception is raised by performing a non--local exit to @var{L}.
@end deftypefun


@deftypefun void ccstr_condition_init_buffer_output_incomplete (ccstr_condition_buffer_output_incomplete_t * @var{C}, ccstr_buffer_t * @var{B}, size_t @var{written_len})
Initialise an already allocated condition object.
@end deftypefun


@deftypefun bool ccstr_condition_is_buffer_output_incomplete (cce_condition_t const * @var{C})
Return @ctrue{} if @var{C} if of type @code{ccstr_descriptor_buffer_output_incomplete}; otherwise
return @cfalse{}.
@end deftypefun


To catch this exceptional condition we can do:

@smallexample
cce_location_t        L[1];

if (cce_location(L)) @{
  if (ccstr_condition_is_buffer_output_incomplete(cce_condition(L))) @{
    CCE_PC(ccstr_condition_buffer_output_incomplete_t, C, cce_condition(L));
    do_something_with(C);
  @}
  cce_run_catch_handlers_final(L);
@} else @{
  do_something(L);
  cce_run_body_handlers(L);
@}
@end smallexample

@c page
@node buffers
@chapter Collecting output in buffers


Programmatically generated textual output is gathered in @dfn{buffers}: dynamically allocated blocks
of memory that can be resized and to which we write with functions similar to the standard
@cfunc{vsnprintf}.

@menu
* buffers typedefs::            Buffer type definitions.
* buffers format::              Formatting buffer contents.
* buffers output::              Writing output to buffers.
* buffers inspection::          Inspecting buffers.
* buffers memory::              Buffers memory handlers.
@end menu

@c page
@node buffers typedefs
@section Buffer type definitions


A buffer can be initialised and finalised as follows:

@example
cce_location_t        L[1];
ccstr_buffer_t        B[1];

if (cce_location(L)) @{
  cce_run_catch_handlers_final(L);
@} else @{
  ccstr_buffer_init(L, B, 123);
  @{
    /* Do something with "B" here. */
  @}
  ccstr_buffer_final(B);
  cce_run_body_handlers(L);
@}
@end example

@noindent
but it is more handy to use the predefined CCExceptions handler:

@example
cce_location_t          L[1];
ccstr_buffer_t          B[1];
cce_clean_handler_t     B_H[1];

if (cce_location(L)) @{
  cce_run_catch_handlers_final(L);
@} else @{
  ccstr_buffer_init(L, B, 123);
  ccstr_clean_handler_buffer_init(L, B_H, B);
  @{
    /* Do something with "B" here. */
  @}
  cce_run_body_handlers(L);
@}
@end example


@deftp {Struct Typedef} ccstr_buffer_t
Type of data structures representing output buffers.  Internally, this structure holds a pointer to
a block of memory holding the actual data; such memory is allocated with @cfunc{malloc}.
@end deftp


@deftypefun void ccstr_buffer_init (cce_location_t * @var{L}, ccstr_buffer_t * @var{B}, size_t @var{initial_buflen})
Initialise an already allocated buffer structure.  Allocate memory for the buffer at the initial
size of @var{initial_buflen}.  If an error occurs allocating: perform a non--local exit by jumping
to @var{L}.
@end deftypefun


@deftypefun void ccstr_buffer_final (ccstr_buffer_t * @var{B})
Finalise the buffer structure.  Release data memory allocated for the buffer.  Reset the structure
fields.  The block of memory holding the structure itself is left untouched.
@end deftypefun


@deftypefun void ccstr_clean_handler_buffer_init (cce_location_t * @var{L}, cce_clean_handler_t * @var{H}, ccstr_buffer_t * @var{B})
Initialise the handler @var{H} to manage finalisation of the buffer @var{B}; register @var{H} as
clean handler in the context of the location @var{L}.
@end deftypefun


@deftypefun void ccstr_error_handler_buffer_init (cce_location_t * @var{L}, cce_error_handler_t * @var{H}, ccstr_buffer_t * @var{B})
Initialise the handler @var{H} to manage finalisation of the buffer @var{B}; register @var{H} as
error handler in the context of the location @var{L}.
@end deftypefun

@c page
@node buffers format
@section Formatting buffer contents


To format an @ascii{} string into a buffer, we do:

@example
cce_location_t  L[1];
ccstr_buffer_t  B[1];
cce_handler_t   B_H[1];

if (cce_location(L)) @{
  cce_run_catch_handlers_final(L);
@} else @{
  ccstr_buffer_init(L, B, 123);
  ccstr_clean_handler_buffer_init(L, B_H, B);
  ccstr_buffer_format(L, "number=%d", 123);
  cce_run_body_handlers(L);
@}
@end example


@deftypefun void ccstr_buffer_format (cce_location_t * @var{L}, ccstr_buffer_t * @var{B}, const char * @var{template}, @dots{})
Format a string and append it to the buffer.  If there is not enough free room in the buffer:
reallocate it enlarging the size.  If an error occurs reallocating: perform a non--local exit by
jumping to @var{L}; in this case @var{B} is left untouched and its contents are still valid.

The buffer is formatted according to @var{template} and the given optional arguments.  The supported
format is the same of the standard @cfunc{printf}.
@end deftypefun


@deftypefun void ccstr_buffer_vformat (cce_location_t * @var{L}, ccstr_buffer_t * @var{B}, const char * @var{template}, va_list @var{ap})
Like @cfunc{ccstr_buffer_format}, but reads arguments from @var{ap}.  Internally @var{ap} is
duplicated, so externally it is left untouched.  We can use this function as follows:

@example
void
print (cce_location_t * L, ccstr_buffer_t * B,
       const char * template, ...)
@{
  va_list       ap;

  va_start(ap, template);
  @{
    ccstr_buffer_vformat(L, B, "X=%g\n", ap);
  @}
  va_end(ap);
@}
@end example
@end deftypefun

@c page
@node buffers output
@section Writing output to buffers


@deftypefun void ccstr_buffer_fwrite (cce_location_t * @var{L}, ccstr_buffer_t * @var{B}, FILE * @var{stream})
Write the buffer contents to @var{stream}, using the system call @cfunc{fwrite}.  If an error
occurs: raise an exception by performing a non--local exit to @var{L}.
@end deftypefun


@deftypefun void ccstr_buffer_write (cce_location_t * @var{L}, ccstr_buffer_t * @var{B}, int @var{filedes})
Write the buffer contents to @var{filedes}, using the system call @cfunc{write}.

@itemize
@item
If the system call completes successfully and all the data is written: return.

@item
If the system call completes successfully but not all the data is written: raise an exception by
performing a non--local exit to @var{L}.

@item
If an error occurs and @code{errno} is set to @code{EINTR}: the function loops internally trying
again to write data.

@item
If an error occurs: raise an exception by performing a non--local exit to @var{L}.
@end itemize
@end deftypefun

@c page
@node buffers inspection
@section Inspecting buffers


@deftypefun bool ccstr_buffer_full_p (ccstr_buffer_t * @var{B})
Return @ctrue{} if the buffer is full; otherwise return @cfalse{}.
@end deftypefun


@deftypefun ccstr_block_t ccstr_buffer_output_block (ccstr_buffer_t * @var{B})
@deftypefunx ccstr_ascii_t ccstr_buffer_output_ascii (ccstr_buffer_t * @var{B})
Return a block representing the data in the buffer.  If @var{B} references an initialised buffer:
the pointer in the block is never @cnull{}.
@end deftypefun


@deftypefun ccstr_block_t ccstr_buffer_target_block (ccstr_buffer_t * @var{B})
@deftypefunx ccstr_ascii_t ccstr_buffer_target_ascii (ccstr_buffer_t * @var{B})
Return a block representing the free room at the end of the buffer.  If @var{B} references an
initialised buffer: the pointer in the block is never @cnull{}.  The return value of this function
is meaningful only if a call to @cfunc{ccstr_buffer_full_p} applied to the same buffer returns
@cfalse{}.
@end deftypefun

@c page
@node buffers memory
@section Buffers memory handlers


@deftypefun void ccstr_buffer_enlarge (cce_location_t * @var{L}, ccstr_buffer_t * @var{B}, size_t @var{required_len})
Reallocate the buffer enlarging it so that it can hold more than @var{required_len} characters.  If
an error occurs reallocating: perform a non--local exit by jumping to @var{L}; in this case the
buffer is left untouched and its contents are still valid.
@end deftypefun

@c page
@c ------------------------------------------------------------
@c Appendices.
@c ------------------------------------------------------------

@include lgpl-3.0.texi
@include fdl-1.3.texi

@c page
@node references
@appendix Bibliography and references


The documentation of @value{PACKAGE} is available online:

@center @value{DocumentationUrl}

@noindent
the latest release of this package can be downloaded from:

@center @value{DownloadUrl}

@noindent
development takes place at:

@center @value{GithubUrl}

@noindent
and as backup at:

@center @value{BitbucketUrl}

We can find the package CCExceptions at:

@center @url{https://github.com/marcomaggi/ccexceptions/}

@c page
@node concept index
@appendix An entry for each concept

@printindex cp

@node function index
@appendix An entry for each function.

@printindex fn

@node variable index
@appendix An entry for each variable.

@printindex vr

@node type index
@appendix An entry for each type.

@printindex tp

@contents
@bye

@c end of file

