\input texinfo.tex
@c %**start of header
@setfilename ccstrings.info
@settitle CCStrings
@c %**end of header

@include version.texi
@include macros.texi

@c page
@c ------------------------------------------------------------
@c Values.
@c ------------------------------------------------------------

@set TITLE                      CCStrings

@c To be used as @value{PACKAGE} whenever we need to include the full
@c name of this package.
@set PACKAGE                    CCStrings

@c To be used as @value{PACKAGE} whenever we need to include the
@c nickname of the project: the name that is used to compose the
@c distribution tarball or the web address.
@set PACKAGE_NICKNAME           ccstrings

@c To be used as @value{AUTHOR} whenever we need to include the list of
@c authors of this document.
@set AUTHOR                     Marco Maggi

@c To be used as @value{AUTHOR_EMAIL} whenever we need to include the
@c email of the *single* author of this document.
@set AUTHOR_EMAIL               @email{marco.maggi-ipsu@@poste.it}

@c To be used as @value{COPYRIGHT_YEARS} whenever we need to include the
@c list of copyright years.
@set COPYRIGHT_YEARS            2017

@c To be used as @value{CCEXCEPTIONS_VERSION} whenever we need to include the required CCExceptions
@c version.
@set CCEXCEPTIONS_VERSION       0.6

@c ------------------------------------------------------------

@set GITHUB_URL                 @url{https://github.com/marcomaggi/@value{PACKAGE_NICKNAME}}
@set BITBUCKET_URL              @url{https://bitbucket.org/marcomaggi/@value{PACKAGE_NICKNAME}}
@set DOWNLOAD_URL               @url{https://bitbucket.org/marcomaggi/@value{PACKAGE_NICKNAME}/downloads}
@set DOCUMENTATION_URL          @url{https://marcomaggi.github.io/docs/@value{PACKAGE_NICKNAME}.html}

@c page
@c ------------------------------------------------------------
@c Copyright notice.
@c ------------------------------------------------------------

@copying
This document describes version @value{VERSION} of @value{PACKAGE}, a C11 language library
implementing custom strings.  This package depends on the package CCExceptions, at least version
@value{CCEXCEPTIONS_VERSION}.

The package is distributed under the terms of the @gnu{} General Public
License (@gpl{}).

The latest release can be downloaded from:

@center @value{DOWNLOAD_URL}

@noindent
development takes place at:

@center @value{GITHUB_URL}

@noindent
and as backup at:

@center @value{BITBUCKET_URL}

@noindent
Copyright @copyright{} @value{COPYRIGHT_YEARS} by @value{AUTHOR} @value{AUTHOR_EMAIL}

@quotation
Permission is granted to copy, distribute and/or modify this document under the terms of the @gnu{}
Free Documentation License, Version 1.3 or any later version published by the Free Software
Foundation; with Invariant Sections being ``@gnu{} Free Documentation License'' and ``@gnu{} General
Public License'', no Front--Cover Texts, and no Back--Cover Texts.  A copy of the license is
included in the section entitled ``@gnu{} Free Documentation License''.
@end quotation
@end copying

@c page
@c ------------------------------------------------------------
@c Headers.
@c ------------------------------------------------------------

@titlepage
@title @value{TITLE}
@subtitle Revision @value{VERSION}
@author @value{AUTHOR} @value{AUTHOR_EMAIL}
@page
@vskip 0pt plus 1filll
@insertcopying
@end titlepage

@c ------------------------------------------------------------

@ifinfo
@dircategory Development
@direntry
* ccstrings: (ccstrings).       CCStrings a template library.
@end direntry
@end ifinfo

@c ------------------------------------------------------------

@ignore
@syncodeindex tp cp
@syncodeindex vr cp
@syncodeindex fn cp
@end ignore

@c page
@ifnottex
@node Top
@top @value{TITLE}

@insertcopying

@menu
* overview::                    Overview of the package.
* version::                     Version functions.
* buffers::                     Collecting output in buffers.

Appendices

* Package License::             GNU General Public License.
* Documentation License::       GNU Free Documentation License.
* references::                  Bibliography and references.

Indexes

* concept index::               An entry for each concept.
* function index::              An entry for each function.
* variable index::              An entry for each variable.
* type index::                  An entry for each type.
@end menu
@end ifnottex

@c page
@node overview
@chapter Overview of the package


This document describes version @value{VERSION} of @value{PACKAGE}, a C11 language library
implementing custom strings.  This package depends on the package CCExceptions, at least version
@value{CCEXCEPTIONS_VERSION}.

@value{PACKAGE} installs the single header file @file{ccstrings.h}.  All the function names in the
@api{} are prefixed with @code{ccstr_}; all the constant names are prefixed with @code{CCSTR_}; all
the type names are prefixed with @code{ccstr_} and suffixed with @code{_t}.

@menu
* overview linking::            Linking code with the library.
@end menu

@c page
@node overview linking
@section Linking code with the library


This package installs a data file for @command{pkg-config}, so when searching for the installed
library with the @gnu{} Autotools, we can add the following macro use to @file{configure.ac}:

@example
PKG_CHECK_MODULES([CCSTRINGS],[ccstrings >= 0.1])
@end example

@noindent
which will set the variables @code{CCSTRINGS_LIBS} and @code{CCSTRINGS_CFLAGS}.

Alternatively we can use the raw @gnu{} Autoconf macros:

@example
AC_CHECK_LIB([ccstrings],[ccstr_version_string],,
  [AC_MSG_FAILURE([test for CCStrings library failed])])
AC_CHECK_HEADERS([ccstrings.h],,
  [AC_MSG_FAILURE([test for CCStrings header failed])])
@end example

@c page
@node version
@chapter Version functions


The installed libraries follow version numbering as established by the @gnu{} Autotools.  For an
explanation of interface numbers as managed by @gnu{} Libtool @xref{Libtool versioning, interface,
Libtool's versioning system, libtool, Shared library support for @gnu{}}.


@deftypefun {const char *} ccstr_version_string (void)
Return a pointer to a statically allocated @asciiz{} string representing
the interface version number.
@end deftypefun


@deftypefun int ccstr_version_interface_current (void)
Return an integer representing the library interface current number.
@end deftypefun


@deftypefun int ccstr_version_interface_revision (void)
Return an integer representing the library interface current revision
number.
@end deftypefun


@deftypefun int ccstr_version_interface_age (void)
Return an integer representing the library interface current age.
@end deftypefun

@c page
@node buffers
@chapter Collecting output in buffers


Programmatically generated textual output is gathered in @dfn{buffers}: dynamically allocated blocks
of memory that can be resized and to which we write with functions similar to the standard
@cfunc{vsnprintf}.

A buffer can be initialised and finalised as follows:

@example
cce_location_t        L[1];
ccstr_buffer_t        B[1];

if (cce_location(L)) @{
  cce_run_error_handlers(L);
  cce_condition_free(cce_condition(L));
@} else @{
  ccstr_buffer_init(L, B, 123);
  ccstr_buffer_final(B);
  cce_run_cleanup_handlers(L);
@}
@end example

@noindent
but it is more handy to use the predefined CCExceptions handler:

@example
cce_location_t        L[1];
ccstr_buffer_t        B[1];
ccstr_buffer_H_t      B_H[1];

if (cce_location(L)) @{
  cce_run_error_handlers(L);
  cce_condition_free(cce_condition(L));
@} else @{
  ccstr_buffer_init(L, B, 123);
  ccstr_cleanup_handler_buffer_init(L, B_H, B);
  cce_run_cleanup_handlers(L);
@}
@end example

@c ------------------------------------------------------------------------

@subsubheading Basic @api{}


@deftp {Struct Typedef} ccstr_buffer_t
Type of data structures representing output buffers.
@end deftp


@deftypefun void ccstr_buffer_init (cce_location_t * @var{L}, ccstr_buffer_t * @var{B}, size_t @var{buflen})
Initialise an already allocated buffer structure.  Allocate memory for the buffer at the initial
size of @var{initial_buflen}.  If an error occurs allocating: perform a non--local exit by jumping
to @var{L}.
@end deftypefun


@deftypefun void ccstr_buffer_final (ccstr_buffer_t * @var{B})
Finalise the buffer structure.  Release data memory allocated for the buffer.  Reset the structure
fields.  The block of memory holding the structure itself is left untouched.
@end deftypefun


@deftypefun void ccstr_buffer_write (cce_location_t * @var{L}, ccstr_buffer_t * @var{B}, const char * @var{template}, @dots{})
Format a string and append it to the buffer.  If there is not enough free room in the buffer:
reallocate it enlarging the size.  If an error occurs reallocating: perform a non--local exit by
jumping to @var{L}.

The buffer is formatted according to @var{template} and the given optional arguments.  The supported
format is the same of the standard @cfunc{printf}.
@end deftypefun


@deftypefun void ccstr_buffer_vwrite (cce_location_t * @var{L}, ccstr_buffer_t * @var{B}, const char * @var{template}, va_list @var{qp})
Like @cfunc{ccstr_buffer_write}, but reads arguments from @var{ap}.  Internally @var{ap} is
duplicated, so externally it is left untouched.  We can use this function as follows:

@example
void
print (cce_location_t * L, ccstr_buffer_t * B,
       const char * template, ...)
@{
  va_list       ap;

  va_start(ap, template);
  @{
    ccstr_buffer_vwrite(L, B, "X=%g\n", ap);
  @}
  va_end(ap);
@}
@end example
@end deftypefun

@c ------------------------------------------------------------------------

@subsubheading CCExceptions handler


@deftp {Struct Type} ccstr_buffer_H_t
Type of data structures representing handlers for @objtype{ccstr_buffer_t} objects.
@end deftp


@deftypefun void ccstr_cleanup_handler_buffer_init (cce_location_t * @var{L}, ccstr_buffer_H_t * @var{H}, ccstr_buffer_t * @var{B})
Initialise the handler @var{H} to manage finalisation of the buffer @var{B}.  Register @var{H} as
cleanup handler in the context of the location @var{L}.
@end deftypefun


@deftypefun void ccstr_error_handler_buffer_init (cce_location_t * @var{L}, ccstr_buffer_H_t * @var{H}, ccstr_buffer_t * @var{B})
Initialise the handler @var{H} to manage finalisation of the buffer @var{B}.  Register @var{H} as
error handler in the context of the location @var{L}.
@end deftypefun


@deftypefn {Generic Macro} {ccstr_buffer_H_t *} ccstr_cast_to_handler_buffer (cce_handler_t * @var{H})
Cast a pointer to generic handler to a pointer to buffer handler.  This macro performs type
checking.
@end deftypefn

@c ------------------------------------------------------------------------

@subsubheading Inspection


@deftypefun {char *} ccstr_buffer_output (ccstr_buffer_t * @var{B})
Return a pointer to the first character in the buffer.
@end deftypefun


@deftypefun bool ccstr_buffer_full_p (ccstr_buffer_t * @var{B})
Return @true{} if the buffer is full; otherwise return @false{}.
@end deftypefun


@deftypefun {char *} ccstr_buffer_output_target (ccstr_buffer_t * @var{B})
Return a pointer to the first free character in the buffer.  The return value of this function is
meaningful only if a call to @cfunc{ccstr_buffer_full_p} applied to the same buffer returns
@false{}.
@end deftypefun


@deftypefun size_t ccstr_buffer_output_size (ccstr_buffer_t * @var{B})
Return the number of bytes available in the buffer.  The return value of this function is meaningful
only if a call to @cfunc{ccstr_buffer_full_p} applied to the same buffer returns @false{}.
@end deftypefun

@c ------------------------------------------------------------------------

@subsubheading Memory handling


@deftypefun void ccstr_buffer_enlarge (cce_location_t * @var{L}, ccstr_buffer_t * @var{B}, size_t @var{required_len})
Reallocate the buffer enlarging it so that it can hold more than @var{required_len} characters.  If
an error occurs reallocating: perform a non--local exit by jumping to @var{L}.
@end deftypefun

@c page
@c ------------------------------------------------------------
@c Appendices.
@c ------------------------------------------------------------

@include lgpl-3.0.texi
@include fdl-1.3.texi

@c page
@node references
@appendix Bibliography and references


The documentation of @value{PACKAGE} is available online:

@center @value{DOCUMENTATION_URL}

@noindent
the latest release of this package can be downloaded from:

@center @value{DOWNLOAD_URL}

@noindent
development takes place at:

@center @value{GITHUB_URL}

@noindent
and as backup at:

@center @value{BITBUCKET_URL}

We can find the package CCExceptions at:

@center @url{https://github.com/marcomaggi/ccexceptions/}

@c page
@node concept index
@appendix An entry for each concept

@printindex cp

@node function index
@appendix An entry for each function.

@printindex fn

@node variable index
@appendix An entry for each variable.

@printindex vr

@node type index
@appendix An entry for each type.

@printindex tp

@contents
@bye

@c end of file

